# Serv.Local Otimizado - Verificador de Sistema PowerShell
# Vers√£o 2.0 - Diagn√≥stico completo

param(
    [switch]$Detailed,
    [switch]$FixIssues
)

# Configura√ß√µes
$ErrorActionPreference = "Continue"
$ProgressPreference = "SilentlyContinue"

# Cores para output
$Colors = @{
    Success = "Green"
    Warning = "Yellow" 
    Error = "Red"
    Info = "Cyan"
    Header = "Magenta"
}

function Write-ColorOutput {
    param([string]$Message, [string]$Color = "White")
    Write-Host $Message -ForegroundColor $Colors[$Color]
}

function Write-Header {
    param([string]$Title)
    Write-Host ""
    Write-ColorOutput "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" "Header"
    Write-ColorOutput "‚ïë  $($Title.PadRight(58))  ‚ïë" "Header"
    Write-ColorOutput "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" "Header"
    Write-Host ""
}

function Test-SystemRequirements {
    Write-ColorOutput "üîç Verificando requisitos do sistema..." "Info"
    $issues = @()
    
    # Verificar Windows 11
    $os = Get-CimInstance Win32_OperatingSystem
    if ($os.Caption -notlike "*Windows 11*") {
        $issues += "‚ö†Ô∏è  Sistema n√£o √© Windows 11: $($os.Caption)"
    } else {
        Write-ColorOutput "‚úÖ Windows 11 detectado: $($os.Caption)" "Success"
    }
    
    # Verificar PowerShell
    if ($PSVersionTable.PSVersion.Major -lt 5) {
        $issues += "‚ùå PowerShell muito antigo: $($PSVersionTable.PSVersion)"
    } else {
        Write-ColorOutput "‚úÖ PowerShell: $($PSVersionTable.PSVersion)" "Success"
    }
    
    # Verificar mem√≥ria
    $memory = [math]::Round($os.TotalVisibleMemorySize / 1MB, 2)
    if ($memory -lt 4) {
        $issues += "‚ö†Ô∏è  Pouca mem√≥ria RAM: $memory GB (recomendado: 4GB+)"
    } else {
        Write-ColorOutput "‚úÖ Mem√≥ria RAM: $memory GB" "Success"
    }
    
    # Verificar espa√ßo em disco
    $disk = Get-CimInstance Win32_LogicalDisk -Filter "DeviceID='C:'"
    $freeSpace = [math]::Round($disk.FreeSpace / 1GB, 2)
    if ($freeSpace -lt 1) {
        $issues += "‚ùå Pouco espa√ßo em disco: $freeSpace GB (necess√°rio: 1GB+)"
    } else {
        Write-ColorOutput "‚úÖ Espa√ßo livre: $freeSpace GB" "Success"
    }
    
    return $issues
}

function Test-PythonInstallation {
    Write-ColorOutput "üêç Verificando instala√ß√£o do Python..." "Info"
    $issues = @()
    
    try {
        $pythonVersion = python --version 2>&1
        if ($LASTEXITCODE -eq 0) {
            # Verificar vers√£o
            if ($pythonVersion -match "Python (\d+)\.(\d+)") {
                $major = [int]$Matches[1]
                $minor = [int]$Matches[2]
                
                if ($major -ge 3 -and $minor -ge 8) {
                    Write-ColorOutput "‚úÖ Python: $pythonVersion" "Success"
                } else {
                    $issues += "‚ùå Python muito antigo: $pythonVersion (necess√°rio: 3.8+)"
                }
            }
            
            # Verificar pip
            $pipVersion = python -m pip --version 2>&1
            if ($LASTEXITCODE -eq 0) {
                Write-ColorOutput "‚úÖ Pip: $($pipVersion.Split(' ')[1])" "Success"
            } else {
                $issues += "‚ùå Pip n√£o encontrado"
            }
        } else {
            $issues += "‚ùå Python n√£o encontrado no PATH"
        }
    }
    catch {
        $issues += "‚ùå Erro ao verificar Python: $($_.Exception.Message)"
    }
    
    return $issues
}

function Test-ProjectStructure {
    Write-ColorOutput "üìÅ Verificando estrutura do projeto..." "Info"
    $issues = @()
    
    $requiredFiles = @(
        "src\app.py",
        "src\config\settings.py",
        "src\models\usuario.py",
        "src\models\produto.py",
        "src\services\database.py",
        "requirements.txt",
        ".env.example",
        "instalar.ps1",
        "iniciar.ps1",
        "migrar.ps1"
    )
    
    $requiredDirs = @("src", "src\config", "src\models", "src\services")
    
    foreach ($dir in $requiredDirs) {
        if (-not (Test-Path $dir)) {
            $issues += "‚ùå Diret√≥rio ausente: $dir"
        } else {
            Write-ColorOutput "‚úÖ Diret√≥rio: $dir" "Success"
        }
    }
    
    foreach ($file in $requiredFiles) {
        if (-not (Test-Path $file)) {
            $issues += "‚ùå Arquivo ausente: $file"
        } else {
            Write-ColorOutput "‚úÖ Arquivo: $file" "Success"
        }
    }
    
    return $issues
}

function Test-VirtualEnvironment {
    Write-ColorOutput "üêç Verificando ambiente virtual..." "Info"
    $issues = @()
    
    if (-not (Test-Path "venv")) {
        $issues += "‚ö†Ô∏è  Ambiente virtual n√£o encontrado (execute: .\instalar.ps1)"
        return $issues
    }
    
    $venvPython = "venv\Scripts\python.exe"
    $venvPip = "venv\Scripts\pip.exe"
    
    if (-not (Test-Path $venvPython)) {
        $issues += "‚ùå Python do ambiente virtual n√£o encontrado"
        return $issues
    }
    
    Write-ColorOutput "‚úÖ Ambiente virtual encontrado" "Success"
    
    # Verificar depend√™ncias
    try {
        $testResult = & $venvPython -c "import flask, sqlite3, pandas, cryptography; print('OK')" 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-ColorOutput "‚úÖ Depend√™ncias principais instaladas" "Success"
        } else {
            $issues += "‚ùå Depend√™ncias ausentes: $testResult"
        }
    }
    catch {
        $issues += "‚ùå Erro ao verificar depend√™ncias: $($_.Exception.Message)"
    }
    
    return $issues
}

function Test-DatabaseHealth {
    Write-ColorOutput "üóÑÔ∏è  Verificando sa√∫de do banco de dados..." "Info"
    $issues = @()
    
    if (-not (Test-Path "data\produtos.db")) {
        $issues += "‚ö†Ô∏è  Banco de dados n√£o encontrado (ser√° criado na primeira execu√ß√£o)"
        return $issues
    }
    
    try {
        $venvPython = "venv\Scripts\python.exe"
        $healthCheck = & $venvPython -c "
import sys, sqlite3, json
sys.path.insert(0, 'src')
try:
    from services.database_init import db_initializer
    health = db_initializer.check_database_health()
    print(json.dumps(health))
except Exception as e:
    print(f'ERROR: {e}')
" 2>&1
        
        if ($LASTEXITCODE -eq 0 -and $healthCheck -notlike "ERROR:*") {
            $health = $healthCheck | ConvertFrom-Json
            
            if ($health.status -eq "healthy") {
                Write-ColorOutput "‚úÖ Banco de dados saud√°vel" "Success"
                Write-ColorOutput "   Tabelas: $($health.tables -join ', ')" "Info"
                Write-ColorOutput "   Tamanho: $([math]::Round($health.size_mb, 2)) MB" "Info"
            } else {
                $issues += "‚ö†Ô∏è  Banco com problemas: $($health.status)"
            }
        } else {
            $issues += "‚ùå Erro ao verificar banco: $healthCheck"
        }
    }
    catch {
        $issues += "‚ùå Erro ao verificar banco: $($_.Exception.Message)"
    }
    
    return $issues
}

function Test-NetworkConnectivity {
    Write-ColorOutput "üåê Verificando conectividade de rede..." "Info"
    $issues = @()
    
    # Verificar se porta 5000 est√° dispon√≠vel
    try {
        $listener = [System.Net.Sockets.TcpListener]::new([System.Net.IPAddress]::Any, 5000)
        $listener.Start()
        $listener.Stop()
        Write-ColorOutput "‚úÖ Porta 5000 dispon√≠vel" "Success"
    }
    catch {
        $issues += "‚ö†Ô∏è  Porta 5000 em uso (use: .\iniciar.ps1 -Port 8080)"
    }
    
    # Verificar conectividade com internet (para atualiza√ß√µes)
    try {
        $response = Test-NetConnection -ComputerName "www.google.com" -Port 80 -InformationLevel Quiet
        if ($response) {
            Write-ColorOutput "‚úÖ Conectividade com internet" "Success"
        } else {
            $issues += "‚ö†Ô∏è  Sem conectividade com internet (atualiza√ß√µes podem falhar)"
        }
    }
    catch {
        $issues += "‚ö†Ô∏è  Erro ao testar conectividade: $($_.Exception.Message)"
    }
    
    return $issues
}

function Test-PerformanceMetrics {
    Write-ColorOutput "‚ö° Verificando m√©tricas de performance..." "Info"
    $issues = @()
    
    # Verificar uso de CPU
    $cpu = Get-CimInstance Win32_Processor | Measure-Object -Property LoadPercentage -Average
    if ($cpu.Average -gt 80) {
        $issues += "‚ö†Ô∏è  CPU com alta utiliza√ß√£o: $($cpu.Average)%"
    } else {
        Write-ColorOutput "‚úÖ CPU: $($cpu.Average)% de uso" "Success"
    }
    
    # Verificar uso de mem√≥ria
    $os = Get-CimInstance Win32_OperatingSystem
    $memoryUsage = [math]::Round((($os.TotalVisibleMemorySize - $os.FreePhysicalMemory) / $os.TotalVisibleMemorySize) * 100, 2)
    if ($memoryUsage -gt 85) {
        $issues += "‚ö†Ô∏è  Mem√≥ria com alta utiliza√ß√£o: $memoryUsage%"
    } else {
        Write-ColorOutput "‚úÖ Mem√≥ria: $memoryUsage% de uso" "Success"
    }
    
    # Verificar fragmenta√ß√£o do disco
    try {
        $disk = Get-CimInstance Win32_LogicalDisk -Filter "DeviceID='C:'"
        $fragmentation = [math]::Round((($disk.Size - $disk.FreeSpace) / $disk.Size) * 100, 2)
        if ($fragmentation -gt 90) {
            $issues += "‚ö†Ô∏è  Disco quase cheio: $fragmentation% usado"
        } else {
            Write-ColorOutput "‚úÖ Disco: $fragmentation% usado" "Success"
        }
    }
    catch {
        $issues += "‚ö†Ô∏è  Erro ao verificar disco: $($_.Exception.Message)"
    }
    
    return $issues
}

function Fix-CommonIssues {
    param([array]$Issues)
    
    if (-not $FixIssues) {
        return
    }
    
    Write-ColorOutput "üîß Tentando corrigir problemas encontrados..." "Info"
    
    foreach ($issue in $Issues) {
        if ($issue -like "*Ambiente virtual n√£o encontrado*") {
            Write-ColorOutput "üîß Criando ambiente virtual..." "Info"
            try {
                python -m venv venv
                Write-ColorOutput "‚úÖ Ambiente virtual criado" "Success"
            }
            catch {
                Write-ColorOutput "‚ùå Erro ao criar ambiente virtual: $($_.Exception.Message)" "Error"
            }
        }
        
        if ($issue -like "*Depend√™ncias ausentes*") {
            Write-ColorOutput "üîß Instalando depend√™ncias..." "Info"
            try {
                & "venv\Scripts\pip.exe" install -r requirements.txt --quiet
                Write-ColorOutput "‚úÖ Depend√™ncias instaladas" "Success"
            }
            catch {
                Write-ColorOutput "‚ùå Erro ao instalar depend√™ncias: $($_.Exception.Message)" "Error"
            }
        }
        
        if ($issue -like "*Diret√≥rio ausente*") {
            $dirName = ($issue -split ": ")[1]
            Write-ColorOutput "üîß Criando diret√≥rio: $dirName" "Info"
            try {
                New-Item -ItemType Directory -Path $dirName -Force | Out-Null
                Write-ColorOutput "‚úÖ Diret√≥rio criado: $dirName" "Success"
            }
            catch {
                Write-ColorOutput "‚ùå Erro ao criar diret√≥rio: $($_.Exception.Message)" "Error"
            }
        }
    }
}

function Show-SystemSummary {
    param([array]$AllIssues)
    
    Write-Header "RESUMO DA VERIFICA√á√ÉO"
    
    $criticalIssues = $AllIssues | Where-Object { $_ -like "‚ùå*" }
    $warnings = $AllIssues | Where-Object { $_ -like "‚ö†Ô∏è*" }
    
    if ($criticalIssues.Count -eq 0 -and $warnings.Count -eq 0) {
        Write-ColorOutput "üéâ SISTEMA PERFEITO!" "Success"
        Write-ColorOutput "   Todos os requisitos atendidos" "Success"
        Write-ColorOutput "   Sistema pronto para uso" "Success"
    } elseif ($criticalIssues.Count -eq 0) {
        Write-ColorOutput "‚úÖ SISTEMA OK COM AVISOS" "Warning"
        Write-ColorOutput "   $($warnings.Count) avisos encontrados" "Warning"
        Write-ColorOutput "   Sistema funcional" "Success"
    } else {
        Write-ColorOutput "‚ùå PROBLEMAS CR√çTICOS ENCONTRADOS" "Error"
        Write-ColorOutput "   $($criticalIssues.Count) problemas cr√≠ticos" "Error"
        Write-ColorOutput "   $($warnings.Count) avisos" "Warning"
    }
    
    Write-Host ""
    
    if ($AllIssues.Count -gt 0) {
        Write-ColorOutput "üìã PROBLEMAS ENCONTRADOS:" "Info"
        foreach ($issue in $AllIssues) {
            Write-ColorOutput "   $issue" "Warning"
        }
        Write-Host ""
        
        if ($criticalIssues.Count -gt 0) {
            Write-ColorOutput "üîß SOLU√á√ïES RECOMENDADAS:" "Info"
            Write-ColorOutput "   1. Execute: .\instalar.ps1" "Info"
            Write-ColorOutput "   2. Execute: .\verificar.ps1 -FixIssues" "Info"
            Write-ColorOutput "   3. Consulte: README_PowerShell.md" "Info"
        }
    }
    
    Write-Host ""
    Write-ColorOutput "üìä PR√ìXIMOS PASSOS:" "Info"
    if ($criticalIssues.Count -eq 0) {
        Write-ColorOutput "   ‚úÖ Sistema pronto: .\iniciar.ps1" "Success"
    } else {
        Write-ColorOutput "   üîß Corrigir problemas primeiro" "Warning"
    }
    Write-ColorOutput "   üìñ Documenta√ß√£o: README_PowerShell.md" "Info"
    Write-ColorOutput "   üÜò Suporte: logs\app.log" "Info"
}

# SCRIPT PRINCIPAL
try {
    Write-Header "VERIFICADOR DE SISTEMA SERV.LOCAL OTIMIZADO"
    
    $allIssues = @()
    
    # Executar todas as verifica√ß√µes
    $allIssues += Test-SystemRequirements
    $allIssues += Test-PythonInstallation
    $allIssues += Test-ProjectStructure
    $allIssues += Test-VirtualEnvironment
    $allIssues += Test-DatabaseHealth
    $allIssues += Test-NetworkConnectivity
    
    if ($Detailed) {
        $allIssues += Test-PerformanceMetrics
    }
    
    # Tentar corrigir problemas se solicitado
    if ($FixIssues -and $allIssues.Count -gt 0) {
        Fix-CommonIssues -Issues $allIssues
        
        # Re-executar verifica√ß√µes ap√≥s corre√ß√µes
        Write-ColorOutput "üîÑ Re-verificando ap√≥s corre√ß√µes..." "Info"
        $allIssues = @()
        $allIssues += Test-SystemRequirements
        $allIssues += Test-PythonInstallation
        $allIssues += Test-ProjectStructure
        $allIssues += Test-VirtualEnvironment
        $allIssues += Test-DatabaseHealth
        $allIssues += Test-NetworkConnectivity
    }
    
    # Mostrar resumo
    Show-SystemSummary -AllIssues $allIssues
    
}
catch {
    Write-ColorOutput "‚ùå Erro fatal durante verifica√ß√£o: $($_.Exception.Message)" "Error"
    exit 1
}
finally {
    Read-Host "Pressione Enter para continuar"
}

