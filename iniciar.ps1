# Serv.Local Otimizado - Inicializador PowerShell
# Vers√£o 2.0 - Otimizado para Windows 11

param(
    [switch]$Debug,
    [string]$Port = "5000",
    [string]$Host = "127.0.0.1"
)

# Configura√ß√µes
$ErrorActionPreference = "Stop"
$ProgressPreference = "SilentlyContinue"

# Cores para output
$Colors = @{
    Success = "Green"
    Warning = "Yellow" 
    Error = "Red"
    Info = "Cyan"
    Header = "Magenta"
}

function Write-ColorOutput {
    param([string]$Message, [string]$Color = "White")
    Write-Host $Message -ForegroundColor $Colors[$Color]
}

function Write-Header {
    param([string]$Title)
    Write-Host ""
    Write-ColorOutput "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" "Header"
    Write-ColorOutput "‚ïë  $($Title.PadRight(58))  ‚ïë" "Header"
    Write-ColorOutput "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" "Header"
    Write-Host ""
}

function Test-SystemRequirements {
    Write-ColorOutput "üîç Verificando requisitos do sistema..." "Info"
    
    # Verificar se est√° no diret√≥rio correto
    if (-not (Test-Path "src\app.py")) {
        Write-ColorOutput "‚ùå Erro: Execute este script no diret√≥rio do Serv.Local Otimizado" "Error"
        Write-Host ""
        Write-ColorOutput "Estrutura esperada:" "Warning"
        Write-ColorOutput "  serv_local_otimizado\" "Warning"
        Write-ColorOutput "  ‚îú‚îÄ‚îÄ src\" "Warning"
        Write-ColorOutput "  ‚îú‚îÄ‚îÄ data\" "Warning"
        Write-ColorOutput "  ‚îú‚îÄ‚îÄ backups\" "Warning"
        Write-ColorOutput "  ‚îî‚îÄ‚îÄ iniciar.ps1 (este arquivo)" "Warning"
        return $false
    }
    
    # Verificar ambiente virtual
    if (-not (Test-Path "venv\Scripts\python.exe")) {
        Write-ColorOutput "‚ùå Ambiente virtual n√£o encontrado!" "Error"
        Write-ColorOutput "Execute primeiro: .\instalar.ps1" "Warning"
        return $false
    }
    
    # Verificar depend√™ncias b√°sicas
    $venvPython = ".\venv\Scripts\python.exe"
    try {
        $testResult = & $venvPython -c "import flask; print('OK')" 2>&1
        if ($LASTEXITCODE -ne 0) {
            Write-ColorOutput "‚ùå Depend√™ncias n√£o instaladas!" "Error"
            Write-ColorOutput "Instalando depend√™ncias..." "Info"
            
            $venvPip = ".\venv\Scripts\pip.exe"
            & $venvPip install -r requirements.txt --quiet
            
            if ($LASTEXITCODE -ne 0) {
                Write-ColorOutput "‚ùå Erro ao instalar depend√™ncias" "Error"
                return $false
            }
        }
    }
    catch {
        Write-ColorOutput "‚ùå Erro ao verificar depend√™ncias: $($_.Exception.Message)" "Error"
        return $false
    }
    
    Write-ColorOutput "‚úÖ Requisitos verificados" "Success"
    return $true
}

function Initialize-Environment {
    Write-ColorOutput "‚öôÔ∏è  Preparando ambiente..." "Info"
    
    # Criar diret√≥rios se n√£o existirem
    $directories = @("data", "backups", "logs")
    foreach ($dir in $directories) {
        if (-not (Test-Path $dir)) {
            New-Item -ItemType Directory -Path $dir -Force | Out-Null
            Write-ColorOutput "üìÅ Diret√≥rio criado: $dir" "Success"
        }
    }
    
    # Verificar/criar arquivo .env
    if (-not (Test-Path ".env")) {
        if (Test-Path ".env.example") {
            Copy-Item ".env.example" ".env"
            Write-ColorOutput "‚öôÔ∏è  Configura√ß√£o padr√£o criada (.env)" "Success"
        } else {
            Write-ColorOutput "‚ö†Ô∏è  Arquivo .env.example n√£o encontrado" "Warning"
        }
    }
    
    # Configurar vari√°veis de ambiente para esta sess√£o
    if ($Debug) {
        $env:DEBUG = "True"
        $env:LOG_LEVEL = "DEBUG"
    }
    
    if ($Port -ne "5000") {
        $env:PORT = $Port
    }
    
    if ($Host -ne "127.0.0.1") {
        $env:HOST = $Host
    }
    
    Write-ColorOutput "‚úÖ Ambiente preparado" "Success"
    return $true
}

function Test-PortAvailability {
    param([string]$Port)
    
    try {
        $listener = [System.Net.Sockets.TcpListener]::new([System.Net.IPAddress]::Any, $Port)
        $listener.Start()
        $listener.Stop()
        return $true
    }
    catch {
        return $false
    }
}

function Get-SystemInfo {
    $info = @{
        OS = (Get-CimInstance Win32_OperatingSystem).Caption
        PowerShell = $PSVersionTable.PSVersion.ToString()
        Python = ""
        Memory = [math]::Round((Get-CimInstance Win32_ComputerSystem).TotalPhysicalMemory / 1GB, 2)
        Disk = [math]::Round((Get-CimInstance Win32_LogicalDisk -Filter "DeviceID='C:'").FreeSpace / 1GB, 2)
    }
    
    try {
        $pythonVersion = & ".\venv\Scripts\python.exe" --version 2>&1
        $info.Python = $pythonVersion -replace "Python ", ""
    }
    catch {
        $info.Python = "N√£o detectado"
    }
    
    return $info
}

function Show-StartupInfo {
    param([hashtable]$SystemInfo, [string]$Port, [string]$Host)
    
    Write-Header "SERV.LOCAL OTIMIZADO v2.0"
    
    Write-ColorOutput "üñ•Ô∏è  INFORMA√á√ïES DO SISTEMA:" "Info"
    Write-ColorOutput "   OS: $($SystemInfo.OS)" "Info"
    Write-ColorOutput "   PowerShell: $($SystemInfo.PowerShell)" "Info"
    Write-ColorOutput "   Python: $($SystemInfo.Python)" "Info"
    Write-ColorOutput "   Mem√≥ria: $($SystemInfo.Memory) GB" "Info"
    Write-ColorOutput "   Espa√ßo livre: $($SystemInfo.Disk) GB" "Info"
    Write-Host ""
    
    Write-ColorOutput "üöÄ SISTEMA INICIALIZADO COM SUCESSO!" "Success"
    Write-Host ""
    Write-ColorOutput "üìä LOCALIZA√á√ÉO DOS DADOS:" "Info"
    Write-ColorOutput "   Banco: $(Resolve-Path 'data\produtos.db' -ErrorAction SilentlyContinue)" "Info"
    Write-ColorOutput "   Backups: $(Resolve-Path 'backups' -ErrorAction SilentlyContinue)" "Info"
    Write-ColorOutput "   Logs: $(Resolve-Path 'logs' -ErrorAction SilentlyContinue)" "Info"
    Write-Host ""
    Write-ColorOutput "üåê ACESSO AO SISTEMA:" "Info"
    Write-ColorOutput "   URL: http://${Host}:${Port}" "Success"
    Write-ColorOutput "   üë§ Login padr√£o: admin / admin123" "Warning"
    Write-Host ""
    Write-ColorOutput "‚ö° MELHORIAS ATIVAS:" "Info"
    Write-ColorOutput "   ‚Ä¢ Pool de conex√µes otimizado" "Success"
    Write-ColorOutput "   ‚Ä¢ √çndices de performance" "Success"
    Write-ColorOutput "   ‚Ä¢ Backup autom√°tico" "Success"
    Write-ColorOutput "   ‚Ä¢ Seguran√ßa melhorada" "Success"
    Write-ColorOutput "   ‚Ä¢ Configura√ß√£o centralizada" "Success"
    Write-Host ""
    Write-ColorOutput "üõë Para parar o sistema: Ctrl+C" "Warning"
    Write-ColorOutput "üìñ Documenta√ß√£o: README.md" "Info"
    Write-Host ""
}

function Start-Application {
    param([string]$Port, [string]$Host)
    
    $venvPython = ".\venv\Scripts\python.exe"
    
    try {
        # Verificar se porta est√° dispon√≠vel
        if (-not (Test-PortAvailability -Port $Port)) {
            Write-ColorOutput "‚ö†Ô∏è  Porta $Port j√° est√° em uso!" "Warning"
            
            # Tentar encontrar porta alternativa
            $alternativePort = 5001
            while (-not (Test-PortAvailability -Port $alternativePort) -and $alternativePort -lt 5010) {
                $alternativePort++
            }
            
            if ($alternativePort -lt 5010) {
                Write-ColorOutput "üîÑ Usando porta alternativa: $alternativePort" "Info"
                $env:PORT = $alternativePort
                $Port = $alternativePort
            } else {
                Write-ColorOutput "‚ùå Nenhuma porta dispon√≠vel encontrada (5000-5009)" "Error"
                Write-ColorOutput "Finalize outros processos ou especifique uma porta diferente:" "Warning"
                Write-ColorOutput "   .\iniciar.ps1 -Port 8080" "Info"
                return $false
            }
        }
        
        # Mostrar informa√ß√µes de inicializa√ß√£o
        $systemInfo = Get-SystemInfo
        Show-StartupInfo -SystemInfo $systemInfo -Port $Port -Host $Host
        
        # Iniciar aplica√ß√£o
        & $venvPython "src\app.py"
        
        return $true
    }
    catch {
        Write-ColorOutput "‚ùå Erro ao iniciar aplica√ß√£o: $($_.Exception.Message)" "Error"
        return $false
    }
}

function Show-PostShutdownInfo {
    Write-Host ""
    Write-Header "SISTEMA FINALIZADO"
    
    Write-ColorOutput "üëã Serv.Local Otimizado finalizado com sucesso!" "Success"
    Write-Host ""
    Write-ColorOutput "üìä Para verificar logs:" "Info"
    Write-ColorOutput "   Get-Content logs\app.log -Tail 20" "Info"
    Write-Host ""
    Write-ColorOutput "üîÑ Para reiniciar:" "Info"
    Write-ColorOutput "   .\iniciar.ps1" "Info"
    Write-Host ""
    Write-ColorOutput "üîß Para configura√ß√µes avan√ßadas:" "Info"
    Write-ColorOutput "   notepad .env" "Info"
    Write-Host ""
}

# SCRIPT PRINCIPAL
try {
    # Verificar requisitos
    if (-not (Test-SystemRequirements)) {
        Read-Host "Pressione Enter para sair"
        exit 1
    }
    
    # Preparar ambiente
    if (-not (Initialize-Environment)) {
        Read-Host "Pressione Enter para sair"
        exit 1
    }
    
    # Iniciar aplica√ß√£o
    $success = Start-Application -Port $Port -Host $Host
    
    if (-not $success) {
        Read-Host "Pressione Enter para sair"
        exit 1
    }
}
catch {
    Write-ColorOutput "‚ùå Erro fatal: $($_.Exception.Message)" "Error"
    Write-ColorOutput "Verifique os logs em logs\app.log para mais detalhes" "Warning"
}
finally {
    Show-PostShutdownInfo
    
    if (-not $Debug) {
        Read-Host "Pressione Enter para continuar"
    }
}

